const pool = require("./connection");
//–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –¢–æ—á–∫–∞—Ö 
function formatRowsToJson(rows, type) {
 const key = type === "base" ? "Base" : "poligons";
  const result = { [key]: {} };

  rows.forEach(r => {
    if (!result[key][r.group_name]) {result[key][r.group_name] = {};}

   result[key][r.group_name][r.point_id] = {
      position: [r.x, r.y],
      vycka: r.vycka,
      date: r.date,
      systemCoordinates: r.coordinate_system,
      positionType: r.position_type
    };
  });

  return result;
}

async function fetchPoints(type, lang) {
  const table = type === "base" ? "points_Base_geo" : "points_poligons_geo";
  const groupTable = type === "base" ? "base_plots" : "poligons_plots";

  // –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏
  const joinColumn = type === "base" ? "base_id" : "poligons_id";
  const nameColumn = type === "base" ? "name_base" : "name_poligons";

  let sql = `
    SELECT 
      p.point_id,
      b.${nameColumn} AS group_name,
      p.x, p.y, p.vycka, 
      DATE_FORMAT(p.date, '%Y-%m-%d') AS date,
      ct1.value AS coordinate_system,
      ct2.value AS position_type
    FROM ${table} p
      JOIN ${groupTable} b ON p.group_name = b.${joinColumn}
      JOIN code_translations ct1 
        ON ct1.code_id = p.systemCoordinates_id AND ct1.lang = ?
      JOIN code_translations ct2 
        ON ct2.code_id = p.positionType_id AND ct2.lang = ?
  `;

  const params = [lang, lang];
  const [rows] = await pool.query(sql, params);
  return formatRowsToJson(rows, type);
} 

// --- –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Base + Poligons ---
async function getAllPointsCombined(lang) {
  const base = await fetchPoints("base", lang);
  const poligons = await fetchPoints("poligons", lang);
  return { ...base, ...poligons };
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É –≤–∏–¥–∞ —Ç–æ—á–µ–∫ –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async function getKodLoad(lang) {
  const [rows] = await pool.query(`
    SELECT c.id, ct.value AS name
    FROM codes c
    JOIN code_translations ct ON ct.code_id = c.id
    WHERE ct.lang = ?
  `, [lang]);

  return rows;
}


//–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
function getTableName(type) {
  if (type === "Base") return "points_Base_geo";
  if (type === "poligons") return "points_poligons_geo";
  throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã");
}
function getGroupTable(type) {
  if (type === "Base") return "base_plots";
  if (type === "poligons") return "poligons_plots";
  throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã");
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
async function getPointById(type, id, groupName) {
  console.log(type, id, groupName);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ Base –∏–ª–∏ Poligons
  let groupTable, groupField, joinField, idField;
  if (["niv", "trig"].includes(groupName)) {
    groupTable = "base_plots";
    groupField = "name_base";    // —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    joinField = "b";             // –∞–ª–∏–∞—Å —Ç–∞–±–ª–∏—Ü—ã
    idField = "base_id";         // —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã
  } else {
    groupTable = "poligons_plots";
    groupField = "name_poligons";
    joinField = "pl";
    idField = "poligons_id";
  }
  const table = getTableName(type);
  const [rows] = await pool.query(`
    SELECT 
      p.point_id, 
      p.x, 
      p.y, 
      p.vycka,
      DATE_FORMAT(p.date, '%Y-%m-%d') AS date,
      p.systemCoordinates_id,
      p.positionType_id,
      ${joinField}.${groupField} AS group_name,   -- –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      ${joinField}.${idField} AS group_id         -- —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã
    FROM ${table} p
    JOIN ${groupTable} ${joinField} ON p.group_name = ${joinField}.${idField}
    WHERE p.point_id = ? AND ${joinField}.${groupField} = ?;
  `, [id, groupName]);

  // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî null
  return rows.length > 0 ? rows[0] : null;
}

// üîπ –î–æ–±–∞–≤–∏—Ç—å
async function addPoint(type, point) {
  const table = getTableName(type);
  const { point_id, group_name, x, y, vycka, date, systemCoordinates_id, positionType_id } = point;
  await pool.query(
    `INSERT INTO ${table} (point_id, group_name, x, y, vycka, date, systemCoordinates_id, positionType_id)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
    [point_id, group_name, x, y, vycka, date, systemCoordinates_id, positionType_id]
  );
  return true;
}

// üîπ –û–±–Ω–æ–≤–∏—Ç—å
async function updatePoint(type, id, fields) {
  const table = getTableName(type);
  const keys = Object.keys(fields).map((k) => `${k}=?`).join(", ");
  if (!keys) throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
  await pool.query(`UPDATE ${table} SET ${keys} WHERE point_id=?`, [...Object.values(fields), id]);
  return true;
}

// üîπ –£–¥–∞–ª–∏—Ç—å
async function deletePoint(type, id) {
  const table = getTableName(type);
  await pool.query(`DELETE FROM ${table} WHERE point_id=?`, [id]);
  return true;
}

module.exports = {
  getAllPointsCombined,
  getKodLoad,
  getPointById,
  addPoint,
  updatePoint,
  deletePoint,
};
